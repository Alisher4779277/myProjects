//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MobilBor.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class mobilborEntities : DbContext
    {
        public mobilborEntities()
            : base("name=mobilborEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Areas> Areas { get; set; }
        public virtual DbSet<Assignments> Assignments { get; set; }
        public virtual DbSet<Brands> Brands { get; set; }
        public virtual DbSet<Building_Type> Building_Type { get; set; }
        public virtual DbSet<Classification_Type> Classification_Type { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<Faces> Faces { get; set; }
        public virtual DbSet<Metro> Metro { get; set; }
        public virtual DbSet<MoneyTypes> MoneyTypes { get; set; }
        public virtual DbSet<Operation_Types> Operation_Types { get; set; }
        public virtual DbSet<Prices> Prices { get; set; }
        public virtual DbSet<PriceTypes> PriceTypes { get; set; }
        public virtual DbSet<Property_Types> Property_Types { get; set; }
        public virtual DbSet<Select> Select { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<States> States { get; set; }
        public virtual DbSet<Statuses> Statuses { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Zones> Zones { get; set; }
        public virtual DbSet<Accept_Rejections> Accept_Rejections { get; set; }
        public virtual DbSet<Phones> Phones { get; set; }
        public virtual DbSet<Adses> Adses { get; set; }
    
        [DbFunction("mobilborEntities", "CheckLogin")]
        public virtual IQueryable<CheckLogin_Result> CheckLogin(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CheckLogin_Result>("[mobilborEntities].[CheckLogin](@Login, @Password)", loginParameter, passwordParameter);
        }
    }
}
